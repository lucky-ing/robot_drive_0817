


ARM Macro Assembler    Page 1 


    1 00000000         ;/****************************Copyright (c)*************
                       ********************************                        
                                    
    2 00000000         
    3 00000000         ;*
    4 00000000         
    5 00000000         ;*               (c) Copyright 2006-2008, hui lian. luo,
                        china, zj. hz 
    6 00000000         
    7 00000000         ;*                            All Rights Reserved
    8 00000000         
    9 00000000         ;*
   10 00000000         
   11 00000000         ;*         ÉîÛÚÊÐÓ¢ÝíÌØÐÅÏ¢¼¼ÊõÓÐÏÞ¹«Ë¾
   12 00000000         
   13 00000000         ;*                            http://www.embedinfo.com
   14 00000000         
   15 00000000         ;*                            ²©¸ñ´ï¿Æ¼¼ÓÐÏÞ¹«Ë¾
   16 00000000         
   17 00000000         ;*                            http://www.bogodtech.com  
                                              
   18 00000000         
   19 00000000         ;*
   20 00000000         
   21 00000000         ;*---------- File Info ---------------------------------
                       ------------------------------
   22 00000000         
   23 00000000         ;* File name:   OS_CPU_A.S
   24 00000000         
   25 00000000         ;* Created By:   ÂÞ»ÔÁª(armgcc@foxmail.com, wyuyun@hotma
                       il.com, lhlzjut@hotmail.com) 
   26 00000000         
   27 00000000         ;* Created date:  2007.11.28
   28 00000000         
   29 00000000         ;* Descriptions:  ucos asm port
   30 00000000         
   31 00000000         ;* Adviser:   Â¥¶«Îä(professor)  Õã½­´óÑ§ÐÅµçÏµ
   32 00000000         
   33 00000000         ;*
   34 00000000         
   35 00000000         ;*---------- History Info ------------------------------
                       -------------------------------
   36 00000000         
   37 00000000         ;* Version:   Ver1.0
   38 00000000         
   39 00000000         ;* Descriptions:  Create Initilze file
   40 00000000         
   41 00000000         ;*
   42 00000000         
   43 00000000         ;*------------------------------------------------------
                       -------------------------------
   44 00000000         
   45 00000000         ;*******************************************************
                       *******************************/
   46 00000000         
   47 00000000         
   48 00000000         
   49 00000000         
   50 00000000         



ARM Macro Assembler    Page 2 


   51 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   52 00000000         
   53 00000000                 IMPORT           OSPrioCur
   54 00000000         
   55 00000000                 IMPORT           OSPrioHighRdy
   56 00000000         
   57 00000000                 IMPORT           OSTCBCur
   58 00000000         
   59 00000000                 IMPORT           OSTCBHighRdy
   60 00000000         
   61 00000000                 IMPORT           OSIntNesting
   62 00000000         
   63 00000000                 IMPORT           OSIntExit
   64 00000000         
   65 00000000                 IMPORT           OSTaskSwHook
   66 00000000         
   67 00000000                 IMPORT           OSInterrputSum
   68 00000000         
   69 00000000         
   70 00000000         
   71 00000000         
   72 00000000         
   73 00000000                 EXPORT           OSStartHighRdy
   74 00000000         
   75 00000000                 EXPORT           OSCtxSw
   76 00000000         
   77 00000000                 EXPORT           OSIntCtxSw
   78 00000000         
   79 00000000                 EXPORT           OS_ENTER_CRITICAL
   80 00000000         
   81 00000000                 EXPORT           OS_EXIT_CRITICAL
   82 00000000         
   83 00000000                 EXPORT           ItDisAll
   84 00000000         
   85 00000000         
   86 00000000         
   87 00000000                 EXPORT           OSPendSV
   88 00000000         
   89 00000000         
   90 00000000         
   91 00000000         
   92 00000000         
   93 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷
   94 00000000         
   95 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷(
                                                            2)
   96 00000000         
   97 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000  ; Èí¼þÖÐ¶ÏºÍÏµÍ³½ÚÅ
                                                            ÄÖÐ¶Ï
   98 00000000         
   99 00000000         ; (¶¼Îª×îµÍ£¬0xff).
  100 00000000         



ARM Macro Assembler    Page 3 


  101 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ´¥·¢Èí¼þÖÐ¶ÏµÄÖµ.
                                                            
  102 00000000         
  103 00000000         
  104 00000000         
  105 00000000         
  106 00000000         
  107 00000000                 PRESERVE8
  108 00000000         
  109 00000000         
  110 00000000         
  111 00000000                 AREA             |.text|, CODE, READONLY
  112 00000000         
  113 00000000                 THUMB
  114 00000000         
  115 00000000         
  116 00000000         
  117 00000000         
  118 00000000         
  119 00000000         
  120 00000000         
  121 00000000         ;/******************************************************
                       *********************************
  122 00000000         
  123 00000000         ;* º¯ÊýÃû³Æ: OS_ENTER_CRITICAL, 
  124 00000000         
  125 00000000         ;*
  126 00000000         
  127 00000000         ;* ¹¦ÄÜÃèÊö: ½øÈëÁÙ½çÇø 
  128 00000000         
  129 00000000         ;*            
  130 00000000         
  131 00000000         ;* ²Î    Êý: None
  132 00000000         
  133 00000000         ;*
  134 00000000         
  135 00000000         ;* ·µ »Ø Öµ: None
  136 00000000         
  137 00000000         ;*         
  138 00000000         
  139 00000000         ;* ×÷¡¡  Õß: ÂÞ»ÔÁª
  140 00000000         
  141 00000000         ;* ÈÕ  ¡¡ÆÚ: 2007Äê11ÔÂ10ÈÕ
  142 00000000         
  143 00000000         ;*------------------------------------------------------
                       ----------------------------------
  144 00000000         
  145 00000000         ;*******************************************************
                       **********************************/ 
  146 00000000         
  147 00000000         
  148 00000000         
  149 00000000         OS_ENTER_CRITICAL
  150 00000000         
  151 00000000         
  152 00000000         
  153 00000000 B672            CPSID            I           ; Disable all the i



ARM Macro Assembler    Page 4 


                                                            nterrupts
  154 00000002         
  155 00000002         
  156 00000002         
  157 00000002 B406            PUSH             {R1,R2}
  158 00000004         
  159 00000004         
  160 00000004         
  161 00000004 492E            LDR              R1, =OSInterrputSum 
                                                            ; OSInterrputSum++
  162 00000006         
  163 00000006 780A            LDRB             R2, [R1]
  164 00000008         
  165 00000008 F102 0201       ADD              R2, R2, #1
  166 0000000C         
  167 0000000C 700A            STRB             R2, [R1]
  168 0000000E         
  169 0000000E BC06            POP              {R1,R2}
  170 00000010         
  171 00000010 4770            BX               LR
  172 00000012         
  173 00000012         
  174 00000012         
  175 00000012         ;/******************************************************
                       *********************************
  176 00000012         
  177 00000012         ;* º¯ÊýÃû³Æ: OS_EXIT_CRITICAL, 
  178 00000012         
  179 00000012         ;*
  180 00000012         
  181 00000012         ;* ¹¦ÄÜÃèÊö: ÍË³öÁÙ½çÇø 
  182 00000012         
  183 00000012         ;*            
  184 00000012         
  185 00000012         ;* ²Î    Êý: None
  186 00000012         
  187 00000012         ;*
  188 00000012         
  189 00000012         ;* ·µ »Ø Öµ: None
  190 00000012         
  191 00000012         ;*         
  192 00000012         
  193 00000012         ;* ×÷¡¡  Õß: ÂÞ»ÔÁª
  194 00000012         
  195 00000012         ;* ÈÕ  ¡¡ÆÚ: 2007Äê11ÔÂ10ÈÕ
  196 00000012         
  197 00000012         ;*------------------------------------------------------
                       ----------------------------------
  198 00000012         
  199 00000012         ;*******************************************************
                       **********************************/
  200 00000012         
  201 00000012         
  202 00000012         
  203 00000012         OS_EXIT_CRITICAL
  204 00000012         
  205 00000012 B406            PUSH             {R1, R2}
  206 00000014         
  207 00000014 492A            LDR              R1, =OSInterrputSum 



ARM Macro Assembler    Page 5 


                                                            ; OSInterrputSum--
  208 00000016         
  209 00000016 780A            LDRB             R2, [R1]
  210 00000018         
  211 00000018 F1A2 0201       SUB              R2, R2, #1
  212 0000001C         
  213 0000001C 700A            STRB             R2, [R1]
  214 0000001E         
  215 0000001E F04F 0100       MOV              R1,  #0
  216 00000022         
  217 00000022 2A00            CMP              R2,  #0     ; if OSInterrputSum
                                                            =0,enable 
  218 00000024         
  219 00000024         ; interruptsÈç¹ûOSInterrputSum=0£¬
  220 00000024         
  221 00000024 F381 8810       MSREQ            PRIMASK, R1
  222 00000028         
  223 00000028 BC06            POP              {R1, R2}
  224 0000002A         
  225 0000002A 4770            BX               LR
  226 0000002C         
  227 0000002C         
  228 0000002C         
  229 0000002C         ;/******************************************************
                       ********************************
  230 0000002C         
  231 0000002C         ;* º¯ÊýÃû³Æ: OSStartHighRdy
  232 0000002C         
  233 0000002C         ;*
  234 0000002C         
  235 0000002C         ;* ¹¦ÄÜÃèÊö: Ê¹ÓÃµ÷¶ÈÆ÷ÔËÐÐµÚÒ»¸öÈÎÎñ
  236 0000002C         
  237 0000002C         ;* 
  238 0000002C         
  239 0000002C         ;* ²Î    Êý: None
  240 0000002C         
  241 0000002C         ;*
  242 0000002C         
  243 0000002C         ;* ·µ »Ø Öµ: None
  244 0000002C         
  245 0000002C         ;*         
  246 0000002C         
  247 0000002C         ;* ×÷¡¡  Õß: ÂÞ»ÔÁª
  248 0000002C         
  249 0000002C         ;* ÈÕ  ¡¡ÆÚ: 2007Äê11ÔÂ10ÈÕ
  250 0000002C         
  251 0000002C         ;*------------------------------------------------------
                       --------------------------------
  252 0000002C         
  253 0000002C         ;*******************************************************
                       *******************************/  
  254 0000002C         
  255 0000002C         
  256 0000002C         
  257 0000002C         OSStartHighRdy
  258 0000002C         
  259 0000002C 4C25            LDR              R4, =NVIC_SYSPRI2 ; set the Pen
                                                            dSV exception prior
                                                            ity



ARM Macro Assembler    Page 6 


  260 0000002E         
  261 0000002E 4D26            LDR              R5, =NVIC_PENDSV_PRI
  262 00000030         
  263 00000030 6025            STR              R5, [R4]    ; //½«R5±£´æµ½ÄÚ´æÎ
                                                            ªR4µÄµØ·½
  264 00000032         
  265 00000032         
  266 00000032         
  267 00000032 F04F 0400       MOV              R4, #0      ; set the PSP to 0 
                                                            for initial context
                                                             switch call
  268 00000036         
  269 00000036 F384 8809       MSR              PSP, R4
  270 0000003A         
  271 0000003A         
  272 0000003A         
  273 0000003A 4C24            LDR              R4, =OSRunning 
                                                            ; OSRunning = TRUE
  274 0000003C         
  275 0000003C F04F 0501       MOV              R5, #1
  276 00000040         
  277 00000040 7025            STRB             R5, [R4]
  278 00000042         
  279 00000042         
  280 00000042         
  281 00000042         ;ÇÐ»»µ½×î¸ßÓÅÏÈ¼¶µÄÈÎÎñ
  282 00000042         
  283 00000042 4C23            LDR              R4, =NVIC_INT_CTRL ;rigger the 
                                                            PendSV exception (c
                                                            auses context switc
                                                            h)
  284 00000044         
  285 00000044 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  286 00000048         
  287 00000048 6025            STR              R5, [R4]
  288 0000004A         
  289 0000004A         
  290 0000004A         
  291 0000004A B662            CPSIE            I           ;enable interrupts 
                                                            at processor level
  292 0000004C         
  293 0000004C         OSStartHang
  294 0000004C         
  295 0000004C E7FE            B                OSStartHang ;should never get h
                                                            ere
  296 0000004E         
  297 0000004E         
  298 0000004E         
  299 0000004E         ;/******************************************************
                       ********************************
  300 0000004E         
  301 0000004E         ;* º¯ÊýÃû³Æ: OSCtxSw
  302 0000004E         
  303 0000004E         ;*
  304 0000004E         
  305 0000004E         ;* ¹¦ÄÜÃèÊö: ÈÎÎñ¼¶ÉÏÏÂÎÄÇÐ»»         
  306 0000004E         
  307 0000004E         ;*
  308 0000004E         



ARM Macro Assembler    Page 7 


  309 0000004E         ;* ²Î    Êý: None
  310 0000004E         
  311 0000004E         ;*
  312 0000004E         
  313 0000004E         ;* ·µ »Ø Öµ: None
  314 0000004E         
  315 0000004E         ;*         
  316 0000004E         
  317 0000004E         ;* ×÷¡¡  Õß: ÂÞ»ÔÁª
  318 0000004E         
  319 0000004E         ;* ÈÕ  ¡¡ÆÚ: 2007Äê11ÔÂ10ÈÕ
  320 0000004E         
  321 0000004E         ;*------------------------------------------------------
                       --------------------------------
  322 0000004E         
  323 0000004E         ;*******************************************************
                       ********************************/
  324 0000004E         
  325 0000004E         
  326 0000004E         
  327 0000004E         OSCtxSw
  328 0000004E         
  329 0000004E B430            PUSH             {R4, R5}
  330 00000050         
  331 00000050 4C1F            LDR              R4, =NVIC_INT_CTRL ;´¥·¢PendSVÒ
                                                            ì³£ (causes context
                                                             switch)
  332 00000052         
  333 00000052 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  334 00000056         
  335 00000056 6025            STR              R5, [R4]
  336 00000058         
  337 00000058 BC30            POP              {R4, R5}
  338 0000005A         
  339 0000005A 4770            BX               LR
  340 0000005C         
  341 0000005C         
  342 0000005C         
  343 0000005C         ;/******************************************************
                       ********************************
  344 0000005C         
  345 0000005C         ;* º¯ÊýÃû³Æ: OSIntCtxSw
  346 0000005C         
  347 0000005C         ;*
  348 0000005C         
  349 0000005C         ;* ¹¦ÄÜÃèÊö: ÖÐ¶Ï¼¶ÈÎÎñÇÐ»»
  350 0000005C         
  351 0000005C         ;*
  352 0000005C         
  353 0000005C         ;* ²Î    Êý: None
  354 0000005C         
  355 0000005C         ;*
  356 0000005C         
  357 0000005C         ;* ·µ »Ø Öµ: None
  358 0000005C         
  359 0000005C         ;*         
  360 0000005C         
  361 0000005C         ;* ×÷¡¡  Õß: ÂÞ»ÔÁª
  362 0000005C         



ARM Macro Assembler    Page 8 


  363 0000005C         ;* ÈÕ  ¡¡ÆÚ: 2007Äê11ÔÂ10ÈÕ
  364 0000005C         
  365 0000005C         ;*------------------------------------------------------
                       --------------------------------
  366 0000005C         
  367 0000005C         ;*******************************************************
                       ********************************/
  368 0000005C         
  369 0000005C         
  370 0000005C         
  371 0000005C         OSIntCtxSw
  372 0000005C         
  373 0000005C B430            PUSH             {R4, R5}
  374 0000005E         
  375 0000005E 4C1C            LDR              R4, =NVIC_INT_CTRL ;´¥·¢PendSVÒ
                                                            ì³£ (causes context
                                                             switch)
  376 00000060         
  377 00000060 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  378 00000064         
  379 00000064 6025            STR              R5, [R4]
  380 00000066         
  381 00000066 BC30            POP              {R4, R5}
  382 00000068         
  383 00000068 4770            BX               LR
  384 0000006A         
  385 0000006A BF00            NOP
  386 0000006C         
  387 0000006C         
  388 0000006C         
  389 0000006C         ;/******************************************************
                       ********************************
  390 0000006C         
  391 0000006C         ;* º¯ÊýÃû³Æ: OSPendSV
  392 0000006C         
  393 0000006C         ;*
  394 0000006C         
  395 0000006C         ;* ¹¦ÄÜÃèÊö: OSPendSV is used to cause a context switch.
                       
  396 0000006C         
  397 0000006C         ;*
  398 0000006C         
  399 0000006C         ;* ²Î    Êý: None
  400 0000006C         
  401 0000006C         ;*
  402 0000006C         
  403 0000006C         ;* ·µ »Ø Öµ: None
  404 0000006C         
  405 0000006C         ;*         
  406 0000006C         
  407 0000006C         ;* ×÷¡¡  Õß: ÂÞ»ÔÁª
  408 0000006C         
  409 0000006C         ;* ÈÕ  ¡¡ÆÚ: 2007Äê11ÔÂ10ÈÕ
  410 0000006C         
  411 0000006C         ;*------------------------------------------------------
                       --------------------------------
  412 0000006C         
  413 0000006C         ;*******************************************************
                       ********************************/



ARM Macro Assembler    Page 9 


  414 0000006C         
  415 0000006C         
  416 0000006C         
  417 0000006C         OSPendSV
  418 0000006C         
  419 0000006C F3EF 8310       MRS              R3, PRIMASK
  420 00000070         
  421 00000070 B672            CPSID            I
  422 00000072         
  423 00000072         
  424 00000072         
  425 00000072 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  426 00000076         
  427 00000076 B130            CBZ              R0, OSPendSV_nosave ; skip regi
                                                            ster save the first
                                                             time
  428 00000078         
  429 00000078         
  430 00000078         
  431 00000078 F1A0 0020       SUB              R0, R0, #0x20 ; save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  432 0000007C         
  433 0000007C E880 0FF0       STM              R0, {R4-R11}
  434 00000080         
  435 00000080         
  436 00000080         
  437 00000080 4C14            LDR              R4, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  438 00000082         
  439 00000082 6824            LDR              R4, [R4]
  440 00000084         
  441 00000084 6020            STR              R0, [R4]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  442 00000086         
  443 00000086         
  444 00000086         
  445 00000086         ; at this point, entire context of process has been save
                       d
  446 00000086         
  447 00000086         OSPendSV_nosave
  448 00000086         
  449 00000086 B500            PUSH             {R14}       ; need to save LR e
                                                            xc_return value
  450 00000088         
  451 00000088 4813            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  452 0000008A         
  453 0000008A 4780            BLX              R0
  454 0000008C         
  455 0000008C F85D EB04       POP              {R14}
  456 00000090         
  457 00000090         
  458 00000090         
  459 00000090 4C12            LDR              R4, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy
  460 00000092         



ARM Macro Assembler    Page 10 


  461 00000092 4D13            LDR              R5, =OSPrioHighRdy
  462 00000094         
  463 00000094 782E            LDRB             R6, [R5]
  464 00000096         
  465 00000096 7026            STRB             R6, [R4]
  466 00000098         
  467 00000098         
  468 00000098         
  469 00000098 4C0E            LDR              R4, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  470 0000009A         
  471 0000009A 4E12            LDR              R6, =OSTCBHighRdy
  472 0000009C         
  473 0000009C 6836            LDR              R6, [R6]
  474 0000009E         
  475 0000009E 6026            STR              R6, [R4]
  476 000000A0         
  477 000000A0         
  478 000000A0         
  479 000000A0 6830            LDR              R0, [R6]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  480 000000A2         
  481 000000A2 E890 0FF0       LDM              R0, {R4-R11} ; restore r4-11 fr
                                                            om new process stac
                                                            k
  482 000000A6         
  483 000000A6 F100 0020       ADD              R0, R0, #0x20
  484 000000AA         
  485 000000AA F380 8809       MSR              PSP, R0     ; load PSP with new
                                                             process SP
  486 000000AE         
  487 000000AE F04E 0E04       ORR              LR, LR, #0x04 ; ensure exceptio
                                                            n return uses proce
                                                            ss stack
  488 000000B2         
  489 000000B2         
  490 000000B2         
  491 000000B2 F383 8810       MSR              PRIMASK, R3
  492 000000B6         
  493 000000B6 4770            BX               LR          ; exception return 
                                                            will restore remain
                                                            ing context
  494 000000B8         
  495 000000B8         
  496 000000B8         
  497 000000B8 BF00            NOP
  498 000000BA         
  499 000000BA         
  500 000000BA         
  501 000000BA         ;/******************************************************
                       ********************************
  502 000000BA         
  503 000000BA         ;* º¯ÊýÃû³Æ: ItDisAll
  504 000000BA         
  505 000000BA         ;*
  506 000000BA         
  507 000000BA         ;* ¹¦ÄÜÃèÊö: ¹Ø±ÕÖÐ¶Ï¿ØÖÆÆ÷µÄËùÓÐÖÐ¶Ï.
  508 000000BA         



ARM Macro Assembler    Page 11 


  509 000000BA         ;*
  510 000000BA         
  511 000000BA         ;* ²Î    Êý: None
  512 000000BA         
  513 000000BA         ;*
  514 000000BA         
  515 000000BA         ;* ·µ »Ø Öµ: None
  516 000000BA         
  517 000000BA         ;*         
  518 000000BA         
  519 000000BA         ;* ×÷¡¡  Õß: ÂÞ»ÔÁª
  520 000000BA         
  521 000000BA         ;* ÈÕ  ¡¡ÆÚ: 2007Äê11ÔÂ10ÈÕ
  522 000000BA         
  523 000000BA         ;*------------------------------------------------------
                       --------------------------------
  524 000000BA         
  525 000000BA         ;*******************************************************
                       ********************************/
  526 000000BA         
  527 000000BA         
  528 000000BA         
  529 000000BA         ItDisAll
  530 000000BA         
  531 000000BA B672            CPSID            I
  532 000000BC         
  533 000000BC 4770            BX               LR
  534 000000BE         
  535 000000BE         
  536 000000BE         
  537 000000BE         
  538 000000BE         
  539 000000BE 00 00           ALIGN
  540 000000C0         
  541 000000C0         
  542 000000C0         
  543 000000C0         ;*******************************************************
                       *********************************
  544 000000C0         
  545 000000C0         ;*  End Of File                                         
                                   
  546 000000C0         
  547 000000C0         ;*******************************************************
                       *********************************    
  548 000000C0         
  549 000000C0                 END
              00000000 
              E000ED20 
              FFFF0000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\Obj\os
_cpu_a.d -o.\Obj\os_cpu_a.o -I"E:\keil v4 for arm\ARM\RV31\INC" -I"E:\keil v4 f
or arm\ARM\CMSIS\Include" --predefine="ARM_MATH_CM3 SETA 1" --list=.\List\os_cp



ARM Macro Assembler    Page 12 


u_a.lst ..\os\os_cpu_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 111 in file ..\os\os_cpu_a.s
   Uses
      None
Comment: .text unused
ItDisAll 000000BA

Symbol: ItDisAll
   Definitions
      At line 529 in file ..\os\os_cpu_a.s
   Uses
      At line 83 in file ..\os\os_cpu_a.s
Comment: ItDisAll used once
OSCtxSw 0000004E

Symbol: OSCtxSw
   Definitions
      At line 327 in file ..\os\os_cpu_a.s
   Uses
      At line 75 in file ..\os\os_cpu_a.s
Comment: OSCtxSw used once
OSIntCtxSw 0000005C

Symbol: OSIntCtxSw
   Definitions
      At line 371 in file ..\os\os_cpu_a.s
   Uses
      At line 77 in file ..\os\os_cpu_a.s
Comment: OSIntCtxSw used once
OSPendSV 0000006C

Symbol: OSPendSV
   Definitions
      At line 417 in file ..\os\os_cpu_a.s
   Uses
      At line 87 in file ..\os\os_cpu_a.s
Comment: OSPendSV used once
OSPendSV_nosave 00000086

Symbol: OSPendSV_nosave
   Definitions
      At line 447 in file ..\os\os_cpu_a.s
   Uses
      At line 427 in file ..\os\os_cpu_a.s
Comment: OSPendSV_nosave used once
OSStartHang 0000004C

Symbol: OSStartHang
   Definitions
      At line 293 in file ..\os\os_cpu_a.s
   Uses
      At line 295 in file ..\os\os_cpu_a.s
Comment: OSStartHang used once
OSStartHighRdy 0000002C

Symbol: OSStartHighRdy



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 257 in file ..\os\os_cpu_a.s
   Uses
      At line 73 in file ..\os\os_cpu_a.s
Comment: OSStartHighRdy used once
OS_ENTER_CRITICAL 00000000

Symbol: OS_ENTER_CRITICAL
   Definitions
      At line 149 in file ..\os\os_cpu_a.s
   Uses
      At line 79 in file ..\os\os_cpu_a.s
Comment: OS_ENTER_CRITICAL used once
OS_EXIT_CRITICAL 00000012

Symbol: OS_EXIT_CRITICAL
   Definitions
      At line 203 in file ..\os\os_cpu_a.s
   Uses
      At line 81 in file ..\os\os_cpu_a.s
Comment: OS_EXIT_CRITICAL used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 93 in file ..\os\os_cpu_a.s
   Uses
      At line 283 in file ..\os\os_cpu_a.s
      At line 331 in file ..\os\os_cpu_a.s
      At line 375 in file ..\os\os_cpu_a.s

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 101 in file ..\os\os_cpu_a.s
   Uses
      At line 285 in file ..\os\os_cpu_a.s
      At line 333 in file ..\os\os_cpu_a.s
      At line 377 in file ..\os\os_cpu_a.s

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 97 in file ..\os\os_cpu_a.s
   Uses
      At line 261 in file ..\os\os_cpu_a.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 95 in file ..\os\os_cpu_a.s
   Uses
      At line 259 in file ..\os\os_cpu_a.s
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 63 in file ..\os\os_cpu_a.s
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 61 in file ..\os\os_cpu_a.s
   Uses
      None
Comment: OSIntNesting unused
OSInterrputSum 00000000

Symbol: OSInterrputSum
   Definitions
      At line 67 in file ..\os\os_cpu_a.s
   Uses
      At line 161 in file ..\os\os_cpu_a.s
      At line 207 in file ..\os\os_cpu_a.s

OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 53 in file ..\os\os_cpu_a.s
   Uses
      At line 459 in file ..\os\os_cpu_a.s
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 55 in file ..\os\os_cpu_a.s
   Uses
      At line 461 in file ..\os\os_cpu_a.s
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 51 in file ..\os\os_cpu_a.s
   Uses
      At line 273 in file ..\os\os_cpu_a.s
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 57 in file ..\os\os_cpu_a.s
   Uses
      At line 437 in file ..\os\os_cpu_a.s
      At line 469 in file ..\os\os_cpu_a.s

OSTCBHighRdy 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: OSTCBHighRdy
   Definitions
      At line 59 in file ..\os\os_cpu_a.s
   Uses
      At line 471 in file ..\os\os_cpu_a.s
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 65 in file ..\os\os_cpu_a.s
   Uses
      At line 451 in file ..\os\os_cpu_a.s
Comment: OSTaskSwHook used once
9 symbols
356 symbols in table
