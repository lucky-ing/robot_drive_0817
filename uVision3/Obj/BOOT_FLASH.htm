<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\BOOT_FLASH.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\BOOT_FLASH.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 903]: Last Updated: Mon Jan 21 04:29:16 2008
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__main &rArr; __rt_entry &rArr; main &rArr; OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c82ab0]">Reset_Handler</a>
 <LI><a href="#[c82b40]">__user_initial_stackheap</a>
 <LI><a href="#[c77e58]">OS_ENTER_CRITICAL</a>
 <LI><a href="#[c77e10]">OS_EXIT_CRITICAL</a>
 <LI><a href="#[1315888]">OSStartHighRdy</a>
 <LI><a href="#[1315840]">OSCtxSw</a>
 <LI><a href="#[13157f8]">OSIntCtxSw</a>
 <LI><a href="#[c82438]">OSPendSV</a>
 <LI><a href="#[13157b0]">ItDisAll</a>
 <LI><a href="#[c82dc8]">NMIException</a>
 <LI><a href="#[c82d80]">HardFaultException</a>
 <LI><a href="#[c82d38]">MemManageException</a>
 <LI><a href="#[c82cf0]">BusFaultException</a>
 <LI><a href="#[c82ca8]">UsageFaultException</a>
 <LI><a href="#[c82c60]">DebugMonitor</a>
 <LI><a href="#[c82c18]">SVCHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c82dc8]">NMIException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c82dc8]">NMIException</a><BR>
 <LI><a href="#[c82d80]">HardFaultException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c82d80]">HardFaultException</a><BR>
 <LI><a href="#[c82d38]">MemManageException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c82d38]">MemManageException</a><BR>
 <LI><a href="#[c82cf0]">BusFaultException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c82cf0]">BusFaultException</a><BR>
 <LI><a href="#[c82ca8]">UsageFaultException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c82ca8]">UsageFaultException</a><BR>
 <LI><a href="#[c82c60]">DebugMonitor</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c82c60]">DebugMonitor</a><BR>
 <LI><a href="#[c82c18]">SVCHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c82c18]">SVCHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c82ab0]">Reset_Handler</a>
 <LI><a href="#[c82dc8]">NMIException</a>
 <LI><a href="#[c82d80]">HardFaultException</a>
 <LI><a href="#[c82d38]">MemManageException</a>
 <LI><a href="#[c82cf0]">BusFaultException</a>
 <LI><a href="#[c82ca8]">UsageFaultException</a>
 <LI><a href="#[c82c18]">SVCHandler</a>
 <LI><a href="#[c82c60]">DebugMonitor</a>
 <LI><a href="#[c82438]">OSPendSV</a>
 <LI><a href="#[c82240]">SysTickHandler</a>
 <LI><a href="#[c81e08]">WWDG_IRQHandler</a>
 <LI><a href="#[c823f0]">PVD_IRQHandler</a>
 <LI><a href="#[c821f8]">TAMPER_IRQHandler</a>
 <LI><a href="#[c82318]">RTC_IRQHandler</a>
 <LI><a href="#[c825a0]">FLASH_IRQHandler</a>
 <LI><a href="#[c823a8]">RCC_IRQHandler</a>
 <LI><a href="#[c82798]">EXTI0_IRQHandler</a>
 <LI><a href="#[c82708]">EXTI1_IRQHandler</a>
 <LI><a href="#[c826c0]">EXTI2_IRQHandler</a>
 <LI><a href="#[c82678]">EXTI3_IRQHandler</a>
 <LI><a href="#[c82630]">EXTI4_IRQHandler</a>
 <LI><a href="#[c82990]">DMAChannel1_IRQHandler</a>
 <LI><a href="#[c82948]">DMAChannel2_IRQHandler</a>
 <LI><a href="#[c82900]">DMAChannel3_IRQHandler</a>
 <LI><a href="#[c828b8]">DMAChannel4_IRQHandler</a>
 <LI><a href="#[c82870]">DMAChannel5_IRQHandler</a>
 <LI><a href="#[c82828]">DMAChannel6_IRQHandler</a>
 <LI><a href="#[c827e0]">DMAChannel7_IRQHandler</a>
 <LI><a href="#[c82a68]">ADC_IRQHandler</a>
 <LI><a href="#[c81e98]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[c81e50]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[c82a20]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[c829d8]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[c825e8]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[c821b0]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[c820d8]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[c82120]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[c82168]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[c82090]">TIM2_IRQHandler</a>
 <LI><a href="#[c82048]">TIM3_IRQHandler</a>
 <LI><a href="#[c82000]">TIM4_IRQHandler</a>
 <LI><a href="#[c82510]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[c82558]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[c82480]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[c824c8]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[c822d0]">SPI1_IRQHandler</a>
 <LI><a href="#[c82288]">SPI2_IRQHandler</a>
 <LI><a href="#[c81fb8]">USART1_IRQHandler</a>
 <LI><a href="#[c81f70]">USART2_IRQHandler</a>
 <LI><a href="#[c81f28]">USART3_IRQHandler</a>
 <LI><a href="#[c82750]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[c82360]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[c81ee0]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[1257c10]">__main</a>
 <LI><a href="#[13155b8]">OSTaskSwHook</a>
 <LI><a href="#[1255160]">__I_use_semihosting</a>
 <LI><a href="#[125b0e0]">OS_TaskIdle</a>
 <LI><a href="#[1317c70]">bot_task_core</a>
 <LI><a href="#[1317be0]">org_task_core</a>
 <LI><a href="#[1317d00]">acstop_task_core</a>
 <LI><a href="#[1317b50]">slow_check_task_core</a>
 <LI><a href="#[1317b98]">send_tile_task_core</a>
 <LI><a href="#[1317cb8]">back_timeout_task_core</a>
 <LI><a href="#[1317c28]">com_task_core</a>
 <LI><a href="#[131c898]">Init_TaskCore</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c82ab0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))

<P><STRONG><a name="[1257c10]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; main &rArr; OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1257958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1251fb0]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1251f68]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1257958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1251f20]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1251ed8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1251c98]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1251c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1251c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1251b30]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1256098]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_init.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[1254440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c82b40]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1257398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c77e58]"></a>OS_ENTER_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c77ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c81fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c82000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c82048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[c82090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[c82240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
<LI><a href="#[c825e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[c82a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[125b0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[125b128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1316488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13164d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1316518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
<LI><a href="#[131af90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[c77e10]"></a>OS_EXIT_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c77ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c81fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c82000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c82048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[c82090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[c82240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
<LI><a href="#[c825e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[c82a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[125b0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[125b128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1316488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13164d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1316518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
<LI><a href="#[131af90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[1315888]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131b020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1315840]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[13157f8]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[c82438]"></a>OSPendSV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[13157b0]"></a>ItDisAll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1257ee0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stkheap2.o(.text), UNUSED)

<P><STRONG><a name="[1257e98]"></a>__rt_stackheap_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_stackheap_init &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1256f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_storage
<LI><a href="#[1257398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1257958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1257e50]"></a>__rt_heap_extend</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stkheap2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1257d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[1257958]"></a>__rt_entry</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; main &rArr; OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1255490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[1255600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
<LI><a href="#[12565b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1257e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
<LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Called By]<UL><LI><a href="#[1251f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1257c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1257910]"></a>__rt_exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[1255fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[12578c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[12565b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12578c8]"></a>__rt_abort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1256a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1257910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>

<P><STRONG><a name="[1257398]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c82b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1256770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1257e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[1256f38]"></a>__rt_stackheap_storage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_stackheap_storage_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1257e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[1256a48]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12578c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
</UL>

<P><STRONG><a name="[12567b8]"></a>__user_libspace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1256770]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1257398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1256728]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12565b8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exit &rArr; __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[1256528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[1257910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1257958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1256008]"></a>__rt_lib_init</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1254258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
<LI><a href="#[1254da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[12559d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signal_init (Weak Reference)
<LI><a href="#[1255a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init (Weak Reference)
<LI><a href="#[1255a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (Weak Reference)
<LI><a href="#[1255ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_user_alloc (Weak Reference)
<LI><a href="#[1255af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (Weak Reference)
<LI><a href="#[1255b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getenv_init (Weak Reference)
<LI><a href="#[1255b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[1255bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (Weak Reference)
<LI><a href="#[1255c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary (Weak Reference)
<LI><a href="#[1255c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (Weak Reference)
<LI><a href="#[1255ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate (Weak Reference)
<LI><a href="#[1255cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap_init (Weak Reference)
<LI><a href="#[1255d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init (Weak Reference)
<LI><a href="#[1255d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atexit_init (Weak Reference)
<LI><a href="#[1255e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_ (Weak Reference)
<LI><a href="#[1255e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_initialize (Weak Reference)
<LI><a href="#[1255ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize (Weak Reference)
<LI><a href="#[1255ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init (Weak Reference)
<LI><a href="#[1256098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>
<BR>[Called By]<UL><LI><a href="#[1257958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1255fc0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[1255948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio (Weak Reference)
<LI><a href="#[1255990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_user_alloc (Weak Reference)
<LI><a href="#[1255dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1257910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>

<P><STRONG><a name="[1255600]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boardinit2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1257958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1255490]"></a>_platform_post_lib_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, boardinit3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1257958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1255160]"></a>__I_use_semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[1255118]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1254da8]"></a>__rt_locale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1254440]"></a>__ARM_get_argv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, no_argv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1256098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[1253ce0]"></a>__rt_fp_status_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1254258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[12914c0]"></a>ACMotor_BreakClose</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(i.ACMotor_BreakClose))
<BR><BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1317be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;org_task_core
<LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[1291478]"></a>ACMotor_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.ACMotor_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMotor_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
<LI><a href="#[1317c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bot_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[1291430]"></a>ACMotor_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.ACMotor_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMotor_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c77d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_It
<LI><a href="#[1317be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;org_task_core
<LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
</UL>

<P><STRONG><a name="[c78170]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c82a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[10bf3a8]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[1263230]"></a>ADC_Configuration</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, adc12.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c78170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[10bec10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[10bed30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[10bed78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[10bee98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[10beee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
<LI><a href="#[10befb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[10bf168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[10bf288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DiscModeCmd
<LI><a href="#[10bf2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DiscModeChannelCountConfig
<LI><a href="#[10bf3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11248e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1124a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1124a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[10bf360]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd), UNUSED)

<P><STRONG><a name="[10bf2d0]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DiscModeChannelCountConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[10bf288]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DiscModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[10bf168]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[10befb8]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c82a68]"></a>ADC_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ADC_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c78170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[10beee0]"></a>ADC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[10bee98]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[10bed78]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[10bed30]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[10beca0]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c77d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_It
</UL>

<P><STRONG><a name="[10bec10]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[131fdb0]"></a>Bot_TimerStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.Bot_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bot_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1166dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1167630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1317be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;org_task_core
<LI><a href="#[131b188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_run_status
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[131fd68]"></a>Bot_TimerStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.Bot_TimerStop))
<BR><BR>[Calls]<UL><LI><a href="#[1166dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1317c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bot_task_core
</UL>

<P><STRONG><a name="[c82a20]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_RX1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c829d8]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_SCE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1266cc8]"></a>CNTL_Configuration</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, io.o(i.CNTL_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CNTL_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[12913e8]"></a>DCMotor_BreakClose</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(i.DCMotor_BreakClose))
<BR><BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[12913a0]"></a>DCMotor_NegativeStart</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, motor.o(i.DCMotor_NegativeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DCMotor_NegativeStart &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1177400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TimeBaseInit
<LI><a href="#[1177fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC1Init
<LI><a href="#[1178768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CtrlPWMOutputs
<LI><a href="#[11787f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
<LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
</UL>

<P><STRONG><a name="[1291358]"></a>DCMotor_NegativeStop</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, motor.o(i.DCMotor_NegativeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCMotor_NegativeStop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1178768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CtrlPWMOutputs
<LI><a href="#[11787f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
</UL>

<P><STRONG><a name="[1291310]"></a>DCMotor_PassiveStart</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, motor.o(i.DCMotor_PassiveStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DCMotor_PassiveStart &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1177400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TimeBaseInit
<LI><a href="#[1177d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC3Init
<LI><a href="#[1178768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CtrlPWMOutputs
<LI><a href="#[11787f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
<LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[12912c8]"></a>DCMotor_PassiveStop</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, motor.o(i.DCMotor_PassiveStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCMotor_PassiveStop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1178768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CtrlPWMOutputs
<LI><a href="#[11787f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[1291280]"></a>DCMotor_PassiveStopNotBreak</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, motor.o(i.DCMotor_PassiveStopNotBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCMotor_PassiveStopNotBreak &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1178768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CtrlPWMOutputs
<LI><a href="#[11787f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tile_task_core
</UL>

<P><STRONG><a name="[c82990]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82948]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82900]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c828b8]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82870]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82828]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c827e0]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1124a98]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1124a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[1124a50]"></a>DMA_DeInit</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1124a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[11248e8]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[c82798]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82750]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82708]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c826c0]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82678]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82630]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c825e8]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c77fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_PA7Stop
<LI><a href="#[c78008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c78050]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit), UNUSED)

<P><STRONG><a name="[1266c80]"></a>EXTI_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, io.o(i.EXTI_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EXTI_Configuration &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[1122278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[c78008]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c825e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1122278]"></a>EXTI_Init</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c77fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_PA7Stop
<LI><a href="#[1266c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_PA7Start
<LI><a href="#[1266c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
</UL>

<P><STRONG><a name="[1266c38]"></a>EXTI_PA7Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, io.o(i.EXTI_PA7Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI_PA7Start &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1122278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[c77fc0]"></a>EXTI_PA7Stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, io.o(i.EXTI_PA7Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI_PA7Stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1122278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c825e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[c825a0]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1120858]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1120810]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[111d518]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1266c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
</UL>

<P><STRONG><a name="[111d440]"></a>GPIO_Init</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c77fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_PA7Stop
<LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[1266b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_Configuration
<LI><a href="#[1266b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Configuration
<LI><a href="#[1266c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_PA7Start
<LI><a href="#[1266cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNTL_Configuration
<LI><a href="#[126b2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_onfiguration
<LI><a href="#[12911f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IoConfiguration
<LI><a href="#[1291280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStopNotBreak
<LI><a href="#[12912c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStop
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[1291358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStop
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
</UL>

<P><STRONG><a name="[111d320]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c77cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_It
<LI><a href="#[c77d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_It
<LI><a href="#[c77d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_It
<LI><a href="#[131fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kpd_scan
</UL>

<P><STRONG><a name="[111d248]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1266ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPSuck_BreakOpen
<LI><a href="#[12911f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IoConfiguration
<LI><a href="#[1291280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStopNotBreak
<LI><a href="#[12912c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStop
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[1291358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStop
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
<LI><a href="#[1291430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Stop
<LI><a href="#[1291478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Start
</UL>

<P><STRONG><a name="[111d200]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1266bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPSuck_BreakClose
<LI><a href="#[1266cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNTL_Configuration
<LI><a href="#[12911f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IoConfiguration
<LI><a href="#[1291280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStopNotBreak
<LI><a href="#[12912c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStop
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[1291358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStop
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
<LI><a href="#[12913e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_BreakClose
<LI><a href="#[1291430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Stop
<LI><a href="#[1291478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Start
<LI><a href="#[12914c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_BreakClose
</UL>

<P><STRONG><a name="[1266bf0]"></a>HPSuck_BreakClose</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, io.o(i.HPSuck_BreakClose))
<BR><BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[1266ba8]"></a>HPSuck_BreakOpen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, io.o(i.HPSuck_BreakOpen))
<BR><BR>[Calls]<UL><LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
</UL>

<P><STRONG><a name="[c82558]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82510]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c824c8]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82480]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[131b188]"></a>Init_run_status</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.Init_run_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_run_status &rArr; Bot_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[131fcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sck_TimerStop
<LI><a href="#[131fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tile_task_core
</UL>

<P><STRONG><a name="[1266b60]"></a>KEY_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, io.o(i.KEY_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEY_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[115c5a0]"></a>NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32f10x_nvic.o(i.NVIC_Init), UNUSED)

<P><STRONG><a name="[115c558]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131c850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[115c318]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[131c850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[1311938]"></a>OSDebugInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_dbg.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[131b0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[131b0b0]"></a>OSInit</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ucos_ii.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[125b290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[1311938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1313bc8]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin), UNUSED)

<P><STRONG><a name="[1313b80]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd), UNUSED)

<P><STRONG><a name="[c77f78]"></a>OSIntExit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ucos_ii.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[125bea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[13157f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[c81fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c82000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[c82048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[c82090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[c82240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
<LI><a href="#[c825e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[c82a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[1316518]"></a>OSSemCreate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ucos_ii.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[125b2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131af48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_compent
</UL>

<P><STRONG><a name="[131b068]"></a>OSSemPend</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ucos_ii.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[125b320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[125b3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
</UL>
<BR>[Called By]<UL><LI><a href="#[1317be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;org_task_core
<LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
<LI><a href="#[1317c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bot_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
<LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[c77ee8]"></a>OSSemPost</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ucos_ii.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[125b368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[c77cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_It
<LI><a href="#[c77d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_It
<LI><a href="#[c81fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c825e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[131fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kpd_scan
</UL>

<P><STRONG><a name="[131b020]"></a>OSStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ucos_ii.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[125bea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[1315888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1313b38]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[125b128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[131afd8]"></a>OSTaskCreateExt</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, ucos_ii.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[125b098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[125b128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[13139d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131af00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_task
<LI><a href="#[131b0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1313af0]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[125b128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1313a60]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[125b0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[13164d0]"></a>OSTaskResume</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ucos_ii.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
</UL>

<P><STRONG><a name="[13139d0]"></a>OSTaskStkInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Called By]<UL><LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[131af90]"></a>OSTaskSuspend</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tile_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[13155b8]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[1316488]"></a>OSTimeDly</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[125b200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tile_task_core
<LI><a href="#[1317be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;org_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
<LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
</UL>

<P><STRONG><a name="[c77ea0]"></a>OSTimeTick</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[c82240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>

<P><STRONG><a name="[125b3b0]"></a>OS_EventTO</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_EventTO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTO
</UL>
<BR>[Called By]<UL><LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[125b368]"></a>OS_EventTaskRdy</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, ucos_ii.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[125b320]"></a>OS_EventTaskWait</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ucos_ii.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[125b2d8]"></a>OS_EventWaitListInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[1316518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[125b290]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[131b0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[125b200]"></a>OS_Sched</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1315840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1316488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13164d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[131af90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[125b128]"></a>OS_TCBInit</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, ucos_ii.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1313af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1313b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[125b0e0]"></a>OS_TaskIdle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_TaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[1313a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucos_ii.o(i.OSInit)
</UL>
<P><STRONG><a name="[125b098]"></a>OS_TaskStkClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[c823f0]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1291238]"></a>PWM_Configuration</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, motor.o(i.PWM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_Configuration &rArr; TIM1_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1177400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TimeBaseInit
<LI><a href="#[1177d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC3Init
<LI><a href="#[1177fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_OC1Init
<LI><a href="#[1178690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_DeInit
<LI><a href="#[1178768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CtrlPWMOutputs
<LI><a href="#[11787f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[12911f0]"></a>PWM_IoConfiguration</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, motor.o(i.PWM_IoConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PWM_IoConfiguration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[111d248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c1c38]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1bf0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1ba8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1b60]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[10beb38]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1178690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_DeInit
</UL>

<P><STRONG><a name="[11c19f8]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit), UNUSED)

<P><STRONG><a name="[1116ac8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1299658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[11c19b0]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11c14a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1920]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c18d8]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1890]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[c823a8]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[11c16e0]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1698]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1650]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1608]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c1530]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[11c14a0]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[11c19b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[c82360]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTCAlarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82318]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1266b18]"></a>SENSOR_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, io.o(i.SENSOR_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SENSOR_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[c822d0]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82288]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[131fd20]"></a>Sck_TimerStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.Sck_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sck_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1166dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1167630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
</UL>

<P><STRONG><a name="[131fcd8]"></a>Sck_TimerStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.Sck_TimerStop))
<BR><BR>[Calls]<UL><LI><a href="#[1166dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
<LI><a href="#[131b188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_run_status
</UL>

<P><STRONG><a name="[c82240]"></a>SysTickHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTickHandler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c77ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[11b57d0]"></a>SysTick_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b56f8]"></a>SysTick_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b56b0]"></a>SysTick_SetReload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c821f8]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TAMPER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c821b0]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82168]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[11787f8]"></a>TIM1_Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim1.o(i.TIM1_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1291238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[1291280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStopNotBreak
<LI><a href="#[12912c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStop
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[1291358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStop
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
</UL>

<P><STRONG><a name="[1178768]"></a>TIM1_CtrlPWMOutputs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim1.o(i.TIM1_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[1291238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[1291280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStopNotBreak
<LI><a href="#[12912c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStop
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[1291358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStop
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
</UL>

<P><STRONG><a name="[1178690]"></a>TIM1_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim1.o(i.TIM1_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10beb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1291238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
</UL>

<P><STRONG><a name="[1177fd0]"></a>TIM1_OC1Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim1.o(i.TIM1_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1291238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
</UL>

<P><STRONG><a name="[1177d00]"></a>TIM1_OC3Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim1.o(i.TIM1_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1291238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
</UL>

<P><STRONG><a name="[c82120]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1177400]"></a>TIM1_TimeBaseInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_tim1.o(i.TIM1_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[1291238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
</UL>

<P><STRONG><a name="[c820d8]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82090]"></a>TIM2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c77d80]"></a>TIM2_It</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, timer.o(i.TIM2_It), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[10beca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[111d320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[11675e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1291430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Stop
<LI><a href="#[131fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop_op
<LI><a href="#[131fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kpd_scan
</UL>

<P><STRONG><a name="[c82048]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c77d38]"></a>TIM3_It</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timer.o(i.TIM3_It), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111d320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[11675e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[131fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
</UL>

<P><STRONG><a name="[c82000]"></a>TIM4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TIM4_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c77cf0]"></a>TIM4_It</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, timer.o(i.TIM4_It), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[111d320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[11675e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[131fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop_op
</UL>

<P><STRONG><a name="[1167630]"></a>TIM_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[131fc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[131fd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sck_TimerStart
<LI><a href="#[131fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_TimerStart
</UL>

<P><STRONG><a name="[11675e8]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c77cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_It
<LI><a href="#[c77d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_It
<LI><a href="#[c77d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_It
</UL>

<P><STRONG><a name="[1167480]"></a>TIM_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[131fc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[131fc90]"></a>TIM_Configuration</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, timer.o(i.TIM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM_Configuration &rArr; TIM_OCInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1166358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11668f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[1166988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCInit
<LI><a href="#[1167480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1167630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[1166dc0]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131fcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sck_TimerStop
<LI><a href="#[131fd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sck_TimerStart
<LI><a href="#[131fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_TimerStop
<LI><a href="#[131fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_TimerStart
</UL>

<P><STRONG><a name="[1166988]"></a>TIM_OCInit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131fc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[11668f8]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131fc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[1166358]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[131fc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[126b2c8]"></a>UART_onfiguration</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, uart.o(i.UART_onfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_onfiguration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c77c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[111d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1299658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[12997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[c81fb8]"></a>USART1_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c77bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[c77c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c77c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[c77ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c81f70]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c81f28]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c77ca8]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c81fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12997c0]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[126b2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_onfiguration
</UL>

<P><STRONG><a name="[12996e8]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[126b280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendChar
</UL>

<P><STRONG><a name="[c77c60]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c81fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c77c18]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c81fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[126b2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_onfiguration
<LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
</UL>

<P><STRONG><a name="[1299658]"></a>USART_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1116ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[126b2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_onfiguration
</UL>

<P><STRONG><a name="[c77bd0]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[c81fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[126b280]"></a>USART_SendChar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.USART_SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[12996e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[c81ee0]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USBWakeUp_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c81e98]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_HP_CAN_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c81e50]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_LP_CAN_RX0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c81e08]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[131af48]"></a>create_os_compent</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_thread.o(i.create_os_compent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = create_os_compent &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1316518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[131af00]"></a>create_os_task</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, os_thread.o(i.create_os_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = create_os_task &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[131fa50]"></a>kpd_scan</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(i.kpd_scan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c77ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[111d320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[131fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop_op
</UL>
<BR>[Called By]<UL><LI><a href="#[c77d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_It
</UL>

<P><STRONG><a name="[131b140]"></a>main</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11b56b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
<LI><a href="#[11b56f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ITConfig
<LI><a href="#[11b57d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[12911f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IoConfiguration
<LI><a href="#[131afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[131b020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[131b0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[131c808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[131c850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1257958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[131fc48]"></a>nop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.nop), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c77d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_It
</UL>

<P><STRONG><a name="[131fa08]"></a>nop_op</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.nop_op), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c77cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_It
<LI><a href="#[c77d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_It
<LI><a href="#[131fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kpd_scan
</UL>

<P><STRONG><a name="[126b238]"></a>printf</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, uart.o(i.printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = printf &rArr; USART_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[126b280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c77d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_It
<LI><a href="#[1317b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_check_task_core
<LI><a href="#[1317b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tile_task_core
<LI><a href="#[1317c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_task_core
<LI><a href="#[1317c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bot_task_core
<LI><a href="#[1317cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_timeout_task_core
<LI><a href="#[1317d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acstop_task_core
<LI><a href="#[131c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TaskCore
</UL>

<P><STRONG><a name="[1254258]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1253ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1254210]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c82dc8]"></a>NMIException</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c82dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMIException
</UL>
<BR>[Called By]<UL><LI><a href="#[c82dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMIException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82d80]"></a>HardFaultException</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c82d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultException
</UL>
<BR>[Called By]<UL><LI><a href="#[c82d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82d38]"></a>MemManageException</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
</UL>
<BR>[Called By]<UL><LI><a href="#[c82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82cf0]"></a>BusFaultException</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c82cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
</UL>
<BR>[Called By]<UL><LI><a href="#[c82cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82ca8]"></a>UsageFaultException</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c82ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
</UL>
<BR>[Called By]<UL><LI><a href="#[c82ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82c60]"></a>DebugMonitor</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c82c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[c82c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82c18]"></a>SVCHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[131c898]"></a>Init_TaskCore</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, main.o(i.Init_TaskCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Init_TaskCore &rArr; create_os_task &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1263230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[1266b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_Configuration
<LI><a href="#[1266b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Configuration
<LI><a href="#[1266bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPSuck_BreakClose
<LI><a href="#[1266c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_PA7Start
<LI><a href="#[1266c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[1266cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CNTL_Configuration
<LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[126b2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_onfiguration
<LI><a href="#[1291238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Configuration
<LI><a href="#[12912c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStop
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[12913e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_BreakClose
<LI><a href="#[1291478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Start
<LI><a href="#[12914c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_BreakClose
<LI><a href="#[131af00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_task
<LI><a href="#[131af48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_os_compent
<LI><a href="#[131af90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[131fc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[131fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[131c850]"></a>NVIC_Configuration</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, main.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[115c318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[115c558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131c808]"></a>RCC_Configuration</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1120810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[1120858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[11c14a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[11c1530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[11c1608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[11c1650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[11c1698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[11c16e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[11c1890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[11c18d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[11c1920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[11c19b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[11c1b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[11c1ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11c1bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[11c1c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[131b140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1317d00]"></a>acstop_task_core</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, os_thread.o(i.acstop_task_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = acstop_task_core &rArr; printf &rArr; USART_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c77e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c77e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
<LI><a href="#[12914c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_BreakClose
<LI><a href="#[1316488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[13164d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[131fd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sck_TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_thread.o(i.create_os_task)
</UL>
<P><STRONG><a name="[1317cb8]"></a>back_timeout_task_core</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, os_thread.o(i.back_timeout_task_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = back_timeout_task_core &rArr; printf &rArr; USART_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1266ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPSuck_BreakOpen
<LI><a href="#[1266bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPSuck_BreakClose
<LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1291358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStop
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
<LI><a href="#[1291478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Start
<LI><a href="#[1316488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[131af90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[131fcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sck_TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_thread.o(i.create_os_task)
</UL>
<P><STRONG><a name="[1317c70]"></a>bot_task_core</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, os_thread.o(i.bot_task_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = bot_task_core &rArr; printf &rArr; USART_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1291478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Start
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[131fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_thread.o(i.create_os_task)
</UL>
<P><STRONG><a name="[1317c28]"></a>com_task_core</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, os_thread.o(i.com_task_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = com_task_core &rArr; printf &rArr; USART_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c77c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[12912c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStop
<LI><a href="#[1291310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStart
<LI><a href="#[1291358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStop
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
<LI><a href="#[1291430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Stop
<LI><a href="#[1291478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Start
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_thread.o(i.create_os_task)
</UL>
<P><STRONG><a name="[1317be0]"></a>org_task_core</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, os_thread.o(i.org_task_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = org_task_core &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[1291430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Stop
<LI><a href="#[12914c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_BreakClose
<LI><a href="#[1316488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[131b068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[131fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_thread.o(i.create_os_task)
</UL>
<P><STRONG><a name="[1317b98]"></a>send_tile_task_core</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_thread.o(i.send_tile_task_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = send_tile_task_core &rArr; printf &rArr; USART_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1291280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_PassiveStopNotBreak
<LI><a href="#[1316488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[131af90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[131b188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_run_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_thread.o(i.create_os_task)
</UL>
<P><STRONG><a name="[1317b50]"></a>slow_check_task_core</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, os_thread.o(i.slow_check_task_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = slow_check_task_core &rArr; printf &rArr; USART_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1266ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPSuck_BreakOpen
<LI><a href="#[1266bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HPSuck_BreakClose
<LI><a href="#[126b238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1291358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStop
<LI><a href="#[12913a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor_NegativeStart
<LI><a href="#[1291478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMotor_Start
<LI><a href="#[1316488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[131af90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[131fcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sck_TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_thread.o(i.create_os_task)
</UL>
<P><STRONG><a name="[125bea8]"></a>OS_SchedNew</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[c77f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[131b020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1255ee8]"></a>__ARM_exceptions_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255ea0]"></a>__Heap_DescSize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255e58]"></a>__alloca_initialize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255e10]"></a>__cpp_initialize__aeabi_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255dc8]"></a>__cxa_finalize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1255fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[1257d78]"></a>__user_heap_extend</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1257e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[1255d80]"></a>_atexit_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1256528]"></a>_call_atexit_fns</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12565b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
</UL>

<P><STRONG><a name="[1255d38]"></a>_clock_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255cf0]"></a>_fp_trap_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255ca8]"></a>_get_lc_collate</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255c60]"></a>_get_lc_ctype</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255c18]"></a>_get_lc_monetary</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255bd0]"></a>_get_lc_numeric</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255b88]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255b40]"></a>_getenv_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255af8]"></a>_init_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255ab0]"></a>_init_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255a68]"></a>_initio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255a20]"></a>_rand_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[12559d8]"></a>_signal_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1256008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1255990]"></a>_terminate_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1255fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[1255948]"></a>_terminateio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1255fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>
<HR></body></html>
